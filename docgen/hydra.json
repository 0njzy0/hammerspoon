[{"doc":"Apple's built-in notifications system.","name":"notify","items":[{"doc":"Unregisters a function to no longer be called when an Apple notification with the given tag is clicked.","def":"notify.unregister(id)","name":"unregister"},{"doc":"Unregisters all functions registered for notification-clicks; called automatically when user config reloads.","def":"notify.unregisterall()","name":"unregisterall"},{"doc":"Show an Apple notification. Tag is a unique string that identifies this notification, and will be passed to notify.clicked() if the notification is clicked. None of the strings are optional, though they may each be blank.","def":"notify.show(title, subtitle, text, tag)","name":"show"},{"doc":"Registers a function to be called when an Apple notification with the given tag is clicked.","def":"notify.register(tag, fn()) -> id","name":"register"}]},{"doc":"Super easy in-Hydra GUI windows.","name":"textgrid","items":[{"doc":"Gets the name and pointsize currently used in the textgrid.","def":"textgrid:getfont() -> name, pointsize","name":"getfont"},{"doc":"Calls the given function when a key is pressed in the focused textgrid. The table t contains keys {ctrl, alt, cmd, key}. Defaults to nil.","def":"textgrid:keydown = function(t)","name":"keydown"},{"doc":"Opens a new textgrid window.","def":"textgrid.open() -> textgrid","name":"open"},{"doc":"Sets the given 1-character UTF-8 encoded string at the given grid coordinates.","def":"textgrid:setchar(str, x, y)","name":"set"},{"doc":"Sets the textgrid's foreground color to the given 6-digit hex string.","def":"textgrid:setfg(str)","name":"setfg"},{"doc":"Prevents the textgrid from closing when your config is reloaded.","def":"textgrid:protect()","name":"protect"},{"doc":"Returns the window that represents this textgrid.","def":"textgrid:window() -> window","name":"window"},{"doc":"Sets the textgrid's background color to the given 6-digit hex string.","def":"textgrid:setbg(str)","name":"setbg"},{"doc":"Closes all non-protected textgrids; called automatically when user config is reloaded.","def":"textgrid.closeall()","name":"closeall"},{"doc":"Replaces all the textgrid's text with space characters.","def":"textgrid:clear()","name":"clear"},{"doc":"Sets the textgrid's background color to the given 6-digit hex string at the given coordinate.","def":"textgrid:setcharbg(str, x, y)","name":"setcharbg"},{"doc":"Sets the textgrid's foreground color to the given 6-digit hex string at the given coordinate.","def":"textgrid:setcharfg(str, x, y)","name":"setcharfg"},{"doc":"Calls the given function when the textgrid is closed. Defaults to nil.","def":"textgrid:closed = function()","name":"closed"},{"doc":"Closes the given textgrid window.","def":"textgrid:close()","name":"close"},{"doc":"All currently open textgrid windows; do not mutate this at all.","def":"textgrid.textgrids = {}","name":"textgrids"},{"doc":"Changes the title of the textgrid window.","def":"textgrid:settitle(title)","name":"settitle"},{"doc":"Brings the textgrid to front and focuses it; implicitly focuses Hydra.","def":"textgrid:focus()","name":"focus"},{"doc":"Returns the size (nubmer of rows and columns) as a size-table with keys {x,y}.","def":"textgrid:getsize() -> size","name":"getsize"},{"doc":"Resizes the textgrid to the number of rows and columns given in the size-table with keys {x,y}.","def":"textgrid:resize(size)","name":"resize"},{"doc":"Calls the given function when the textgrid is resized. Defaults to nil.","def":"textgrid:resized = function()","name":"resized"},{"doc":"Sets the new font of the textgrid, potentially changing its visible size (no resize event is fired).","def":"textgrid:usefont(name, pointsize)","name":"usefont"}]},{"doc":"Manipulate monitors (aka screens).","name":"screen","items":[{"doc":"Returns the 'main' screen, i.e. the one containing the currently focused window.","def":"screen.mainscreen() -> screen","name":"mainscreen"},{"doc":"Returns a screen's frame in its own coordinate space.","def":"screen.frame(screen) -> rect","name":"frame"},{"doc":"Set the tint on a screen; experimental.","def":"screen.settint(redarray, greenarray, bluearray)","name":"settint"},{"doc":"Returns all the screens there are.","def":"screen.allscreens() -> screen[]","name":"allscreens"},{"doc":"Returns the screen 'before' this one; I have no idea how they're ordered though.","def":"screen:previous() -> screen","name":"previous"},{"doc":"Returns a screen's frame in its own coordinate space, without the dock or menu.","def":"screen.visibleframe(screen) -> rect","name":"vislbleframe"},{"doc":"Returns the screen 'after' this one; I have no idea how they're ordered though.","def":"screen:next() -> screen","name":"next"},{"doc":"Returns the screen's rect in absolute coordinates, without the dock or menu.","def":"screen:frame_without_dock_or_menu() -> rect","name":"frame_without_dock_or_menu"},{"doc":"Returns the screen's rect in absolute coordinates, including the dock and menu.","def":"screen:frame_including_dock_and_menu() -> rect","name":"frame_including_dock_and_menu"}]},{"doc":"Check for and install Hydra updates.","name":"updates","items":[{"doc":"Checks for an update. If one is available, calls updates.available(true); otherwise calls updates.available(false).","def":"updates.check()","name":"check"},{"doc":"Called after updates.check() runs, with a boolean parameter specifying whether an update is available. Default implementation pushes a notification when an update is available with the tag 'showupdate'.","def":"updates.available = function(isavailable)","name":"available"}]},{"doc":"Functionality to assist with debugging and experimentation.","name":"logger","items":[{"doc":"Unregisters a function that handles new log lines.","def":"logger.removehandler(index)","name":"removehandler"},{"doc":"Opens a textgrid that can browse all logs.","def":"logger.show() -> textgrid","name":"show"},{"doc":"Registers a function to handle new log lines.","def":"logger.addhandler(fn(str)) -> index","name":"addhandler"},{"doc":"List of lines logged so far; caps at logger.maxlines. You may clear it by setting it to {} yourself.","def":"logger.lines = {}","name":"lines"},{"doc":"Maximum number of lines to be logged.","def":"logger.maxlines = 500","name":"maxlines"}]},{"doc":"Functions for converting between Lua values and JSON strings.","name":"json","items":[{"doc":"Returns a JSON string representing the given value; if prettyprint is true, the resulting string will be quite beautiful.","def":"json.encode(val[, prettyprint?]) -> str","name":"encode"},{"doc":"Returns a Lua value representing the given JSON string.","def":"json.decode(str) -> val","name":"decode"}]},{"doc":"Standard high-level namespace for third-party extensions.","name":"ext","items":{}},{"doc":"Functions for manipulating the mouse cursor.","name":"mouse","items":[{"doc":"Returns the current location of the mouse on the current screen as a point.","def":"mouse.get() -> point","name":"get"},{"doc":"Moves the mouse to the given location on the current screen.","def":"mouse.set(point)","name":"set"}]},{"doc":"Watch paths recursively for changes.","name":"pathwatcher","items":[{"doc":"Registers pathwatcher's fn as a callback when pathwatcher's path or any descendent changes.","def":"pathwatcher:start()","name":"start"},{"doc":"Returns a new pathwatcher that can be started and stopped. Contains fields: path, fn.","def":"pathwatcher.new(path, fn())","name":"new"},{"doc":"Unregisters pathwatcher's fn so it won't be called again until the pathwatcher is restarted.","def":"pathwatcher:stop()","name":"stop"},{"doc":"Calls p:stop() for all started pathwatchers; called automatically when user config reloads.","def":"pathwatcher.stopall()","name":"stopall"}]},{"doc":"Functions for controlling whether Hydra launches at login.","name":"autolaunch","items":[{"doc":"Returns whether Hydra launches when you login.","def":"autolaunch.get() -> bool","name":"get"},{"doc":"Sets whether Hydra launches when you login.","def":"autolaunch.set(bool)","name":"set"}]},{"doc":"For showing stuff in web views!","name":"webview","items":[{"doc":"Loads the given URL in the webview.","def":"webview:loadurl(url)","name":"loadurl"},{"doc":"Set whether a webview window has a border.","def":"webview:setborderless(bool)","name":"setborderless"},{"doc":"When level is -1, window is always below all others; when 0, window is normal; when 1, window is above all others.","def":"webview:setlevel(level)","name":"setlevel"},{"doc":"Set whether a webview window has a shadow.","def":"webview:sethasshadow(bool)","name":"sethasshadow"},{"doc":"Loads the given file in the web view.","def":"webview:loadfile(path)","name":"loadfile"},{"doc":"Opens and returns a new webview instance; as with all other Hydra objects, it's just a table, and you're free to set whatever keys you want on it.","def":"webview.open()","name":"open"},{"doc":"Set the title of a webview window.","def":"webview:settitle(string)","name":"settitle"},{"doc":"Return the window that represents the given webview.","def":"webview:window() -> window","name":"window"},{"doc":"Called (if set) when the webview closes.","def":"webview.closed = function()","name":"closed"},{"doc":"Set whether a webview window can be interacted with via the mouse.","def":"webview:setignoresmouse(bool)","name":"setignoresmouse"},{"doc":"Loads the given string in the webview; basepath must be an absolute path.","def":"webview:loadstring(string, basepath)","name":"loadstring"},{"doc":"When a link is clicked with a URL like 'hydra:foo', this function is called (if set) with 'foo' as its argument.","def":"webview.clicked = function(str)","name":"clicked"}]},{"doc":"Control Hydra's menu-bar icon.","name":"menu","items":[{"doc":"Hides Hydra's menubar icon.","def":"menu.hide()","name":"hide"},{"doc":"Shows Hyra's menubar icon. The function should return a table of tables with keys: title, fn, checked (optional), disabled (optional)","def":"menu.show(fn() -> itemstable)","name":"show"}]},{"doc":"Mathy stuff.","name":"geometry","items":[{"doc":"Rotates a point around another point N times.","def":"geometry.rotateccw(point, aroundpoint, ntimes = 1) -> point","name":"rotateccw"},{"doc":"Returns the intersection of two rects as a new rect.","def":"geometry.intersectionrect(rect1, rect2) -> rect3","name":"intersectionrect"},{"doc":"Convenience function for creating a size-table.","def":"geometry.size(w, h) -> size","name":"size"},{"doc":"Returns hypotenuse of a line defined from 0,0 to point.","def":"geometry.hypot(point) -> number","name":"hypot"},{"doc":"Returns the midpoint of a rect.","def":"geometry.rectmidpoint(r) -> point","name":"rectmidpoint"},{"doc":"Convenience function for creating a rect-table.","def":"geometry.rect(x, y, w, y) -> rect","name":"rect"},{"doc":"Convenience function for creating a point-table.","def":"geometry.point(x, y) -> point","name":"point"}]},{"doc":"Super-helpful functional programming utilities.","name":"fnutils","items":[{"doc":"Returns whether the table contains the given element.","def":"fnutils.contains(t, el) -> bool","name":"contains"},{"doc":"Runs fn(el1, el2) for every el in t, then fn(result, el3), etc, until there's only one left.","def":"fnutils.reduce(t, fn) -> t2","name":"reduce"},{"doc":"Returns a table of the elements in t in which fn(el) is truthy.","def":"fnutils.filter(t, fn) -> t","name":"filter"},{"doc":"Adds all elements of t2 to the end of t1.","def":"fnutils.concat(t1, t2)","name":"concat"},{"doc":"Runs fn(el) for every el in t, and assuming the results are tables, combines them into a new table.","def":"fnutils.mapcat(t, fn) -> t2","name":"mapcat"},{"doc":"Returns a table of the results of fn(el) on every el in t.","def":"fnutils.map(t, fn) -> t","name":"map"},{"doc":"Returns the first element where fn(el) is truthy.","def":"fnutils.find(t, fn) -> el","name":"find"},{"doc":"Returns the index of a given element in a table, or nil if not found.","def":"fnutils.indexof(t, el) -> int or nil","name":"indexof"}]},{"doc":"Utilities for handling UTF-8 strings 'correctly'.","name":"utf8","items":[{"doc":"Returns the number of characters as humans would count them.","def":"utf8.count(str) -> int","name":"count"},{"doc":"Splits the string into groups of (UTF-8 encoded) strings representing what humans would consider individual characters.\n\nThe result is a sequential table, such that table.concat(result) produces the original string.","def":"utf8.chars(str) -> {str, ...}","name":"chars"}]},{"doc":"Functions for managing any window","name":"window","items":[{"doc":"Returns all windows","def":"window.allwindows() -> win[]","name":"allwindows"},{"doc":"Moves the window to the given point in absolute coordinate.","def":"window:settopleft(point)","name":"settopleft"},{"doc":"True if the app is not hidden or minimized.","def":"window:isvisible() -> bool","name":"isvisible"},{"doc":"Try to make this window focused.","def":"window:focus() -> bool","name":"focus"},{"doc":"Make this window fill the whole screen its on, without covering the dock or menu.","def":"window:maximize()","name":"maximize"},{"doc":"The top-left corner of the window in absolute coordinates.","def":"window:topleft() -> point","name":"topleft"},{"doc":"Minimizes the window.","def":"window:minimize()","name":"minimize"},{"doc":"Make this window the main window of the given application; deos not implicitly focus the app.","def":"window:becomemain() -> bool","name":"becomemain"},{"doc":"Get all windows west of this one, ordered by closeness.","def":"window:windows_to_west()","name":"windows_to_west"},{"doc":"Returns the app that the window belongs to.","def":"window:application() -> app","name":"application"},{"doc":"Experimental.","def":"window.visible_windows_sorted_by_recency() -> win[]","name":"visible_windows_sorted_by_recency"},{"doc":"Returns the title of the window (as UTF8).","def":"window:title() -> string","name":"title"},{"doc":"True if the window is currently minimized in the dock.","def":"window:isminimized() -> bool","name":"isminimized"},{"doc":"Get the frame of the window in absolute coordinates.","def":"window:frame() -> rect","name":"frame"},{"doc":"Returns the role of the window, whatever that means.","def":"window:role() -> string","name":"role"},{"doc":"Focus the first focus-able window to the south of this one.","def":"window:focuswindow_south()","name":"focuswindow_south"},{"doc":"Focus the first focus-able window to the north of this one.","def":"window:focuswindow_north()","name":"focuswindow_north"},{"doc":"Returns the subrole of the window, whatever that means.","def":"window:subrole() -> string","name":"subrole"},{"doc":"Un-minimizes the window.","def":"window:unminimize()","name":"unminimize"},{"doc":"Get other windows on the same screen as self.","def":"window:otherwindows_samescreen() -> win[]","name":"otherwindows_samescreen"},{"doc":"Resizes the window.","def":"window:setsize(size)","name":"setsize"},{"doc":"Focus the first focus-able window to the west of this one.","def":"window:focuswindow_west()","name":"focuswindow_west"},{"doc":"True if the window's subrole indicates it's 'a standard window'.","def":"window:isstandard() -> bool","name":"isstandard"},{"doc":"Get all windows south of this one, ordered by closeness.","def":"window:windows_to_south()","name":"windows_to_south"},{"doc":"The size of the window.","def":"window:size() -> size","name":"size"},{"doc":"Get all windows east of this one, ordered by closeness.","def":"window:windows_to_east()","name":"windows_to_east"},{"doc":"Focus the first focus-able window to the east of this one.","def":"window:focuswindow_east()","name":"focuswindow_east"},{"doc":"Set the frame of the window in absolute coordinates.","def":"window:setframe(rect)","name":"setframe"},{"doc":"Get the screen this window is mostly on.","def":"window:screen()","name":"screen"},{"doc":"Get all windows on all screens that match window.isvisible.","def":"window.visiblewindows() -> win[]","name":"visiblewindows"},{"doc":"Get every window except this one.","def":"window:otherwindows_allscreens() -> win[]","name":"otherwindows_allscreens"},{"doc":"Returns the focused window, or nil.","def":"window.focusedwindow() -> window","name":"focusedwindow"},{"doc":"Get all windows north of this one, ordered by closeness.","def":"window:windows_to_north()","name":"windows_to_north"}]},{"doc":"Manipulate running applications.","name":"application","items":[{"doc":"Returns all open windows owned by the given app.","def":"application:allwindows() -> window[]","name":"allwindows"},{"doc":"Unhides the app (and all its windows) if it's hidden.","def":"application:unhide()","name":"unhide"},{"doc":"Launches the app with the given name, or activates it if it's already running.","def":"application.launchorfocus(name)","name":"launchorfocus"},{"doc":"Returns only the app's windows that are visible.","def":"application:visiblewindows() -> win[]","name":"visiblewindows"},{"doc":"Returns any running apps that have the given bundleid.","def":"application.applicationsforbundleid(bundleid) -> app[]","name":"applicationsforbundleid"},{"doc":"Assuredly terminates the app.","def":"application:kill9()","name":"kill9"},{"doc":"Returns whether the app is currently hidden.","def":"application:ishidden() -> bool","name":"ishidden"},{"doc":"Hides the app (and all its windows).","def":"application:hide()","name":"hide"},{"doc":"Tries to activate the app (make it focused) and returns its success.","def":"application:activate() -> bool","name":"activate"},{"doc":"Returns the bundle identifier of the app.","def":"application:bundleid() -> string","name":"bundleid"},{"doc":"Tries to terminate the app.","def":"application:kill()","name":"kill"},{"doc":"Returns the localized name of the app (in UTF8).","def":"application:title() -> string","name":"title"},{"doc":"Returns the running app for the given pid, if it exists.","def":"application.applicationforpid(pid) -> app or nil","name":"applicationforpid"},{"doc":"Returns all running apps.","def":"application.runningapplications() -> app[]","name":"runningapplications"}]},{"doc":"Functions for user-defined settings that persist across Hydra launches.","name":"settings","items":[{"doc":"Saves the given value for the string key; value must be a string, number, boolean, nil, or a table of any of these, recursively.","def":"settings.set(key, val)","name":"set"},{"doc":"Gets the Lua value for the given string key.","def":"settings.get(key) -> val","name":"get"}]},{"doc":"Execute functions with various timing rules.","name":"timer","items":[{"doc":"Runs the function exactly once in the entire lifespan of Hydra; reset only when you quit\/restart.","def":"timer.runonce(fn())","name":"runonce"},{"doc":"Stops the timer's fn from getting called until started again.","def":"timer:stop() -> timer","name":"stop"},{"doc":"Returns the number of seconds in seconds.","def":"timer.seconds(n) -> sec","name":"seconds"},{"doc":"Stops all running timers; called automatically when user config reloads.","def":"timer.stopall()","name":"stopall"},{"doc":"Returns the number of weeks in seconds.","def":"timer.weeks(n) -> sec","name":"weeks"},{"doc":"Returns the number of days in seconds.","def":"timer.days(n) -> sec","name":"days"},{"doc":"Begins to execute timer.fn every timer.seconds; calling this does not cause an initial firing of the timer immediately.","def":"timer:start() -> timer","name":"start"},{"doc":"Creates a new timer that can be started. Has the fields: seconds, fn.","def":"timer.new(seconds, fn) -> timer","name":"new"},{"doc":"Returns the number of minutes in seconds.","def":"timer.minutes(n) -> sec","name":"minutes"},{"doc":"Runs the function after sec seconds.","def":"timer.doafter(sec, fn())","name":"doafter"},{"doc":"Returns the number of hours in seconds.","def":"timer.hours(n) -> sec","name":"hours"}]},{"doc":"Manage global hotkeys.","name":"hotkey","items":[{"doc":"Shortcut for: return hotkey.new(...):enable()","def":"hotkey.bind(...) -> hotkey","name":"bind"},{"doc":"Disables all hotkeys; automatically called when user config reloads.","def":"hotkey.disableall()","name":"disableall"},{"doc":"Creates a new hotkey that can be enabled. Mods is a table containing any of the elements {cmd, ctrl, alt, shift}. Key may be any 1-character string, or 'F1', 'Enter', etc. Both are case-insensitive. The hotkey has the public fields: key, mods, fn.","def":"hotkey.new(mods, key, fn) -> hotkey","name":"new"},{"doc":"Disables the given hotkey; does not remove it from hotkey.keys.","def":"hotkey:disable() -> self","name":"disable"},{"doc":"Registers the hotkey's fn as the callback when the user presses key while holding mods.","def":"hotkey:enable() -> hotkey","name":"enable"}]},{"doc":"General stuff.","name":"hydra","items":[{"doc":"Error handler for hydra.call; intended for you to set, not for third party libs","def":"hydra.errorhandler = function(err)","name":"errorhandler"},{"doc":"Opens a readline-like REPL (Read-Eval-Print-Loop) that has full access to Hydra's API; type 'help' for more info.","def":"hydra.repl() -> textgrid","name":"repl"},{"doc":"Displays the standard OS X about panel; implicitly focuses Hydra.","def":"hydra.showabout()","name":"showabout"},{"doc":"Returns a UUID as a string","def":"hydra.uuid() -> string","name":"uuid"},{"doc":"Just like pcall, except that failures are handled using hydra.errorhandler","def":"hydra.call(fn, ...) -> ...","name":"call"},{"doc":"Runs a shell function and returns stdout as a string (without trailing newline).","def":"hydra.exec(command) -> string","name":"exec"},{"doc":"Reloads your init-file. Makes sure to clear any state that makes sense to clear (hotkeys, pathwatchers, etc).","def":"hydra.reload()","name":"reload"},{"doc":"Returns whether accessibility is enabled. If passed `true`, prompts the user to enable it.","def":"hydra.check_accessibility(shouldprompt) -> isenabled","name":"check_accessibility"},{"doc":"Makes Hydra the currently focused app; useful in combination with textgrids.","def":"hydra.focushydra()","name":"focushydra"},{"doc":"Checks if a file exists, and whether it's a directory.","def":"hydra.fileexists(path) -> exists, isdir","name":"fileexists"},{"doc":"The path of the built-in lua source files, with no trailing slash.","def":"hydra.resourcesdir -> string","name":"resourcesdir"},{"doc":"Returns the full path to the file ~\/.hydra\/{name}.lua","def":"hydra.userfile(name)","name":"userfile"},{"doc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience..","def":"hydra.alert(str, seconds = 2)","name":"alert"},{"doc":"Convenience wrapper around dofile() and hydra.userfile(name)","def":"hydra.douserfile(name)","name":"douserfile"}]}]
