[{"items":[{"def":"fnutils.concat(t1, t2)","name":"concat","doc":"Adds all elements of t2 to the end of t1."},{"def":"fnutils.map(t, fn) -> t","name":"map","doc":"Returns a table of the results of fn(el) on every el in t."},{"def":"fnutils.contains(t, el) -> bool","name":"contains","doc":"Returns whether the table contains the given element."},{"def":"fnutils.indexof(t, el) -> int or nil","name":"indexof","doc":"Returns the index of a given element in a table, or nil if not found."},{"def":"fnutils.each(t, fn) -> t","name":"each","doc":"Runs fn(el) for every el in t."},{"def":"fnutils.find(t, fn) -> el","name":"find","doc":"Returns the first element where fn(el) is truthy."},{"def":"fnutils.reduce(t, fn) -> t2","name":"reduce","doc":"Runs fn(el1, el2) for every el in t, then fn(result, el3), etc, until there's only one left."},{"def":"fnutils.filter(t, fn) -> t","name":"filter","doc":"Returns a table of the elements in t in which fn(el) is truthy."},{"def":"fnutils.mapcat(t, fn) -> t2","name":"mapcat","doc":"Runs fn(el) for every el in t, and assuming the results are tables, combines them into a new table."}],"name":"fnutils","doc":"Super-helpful functional programming utilities."},{"items":[{"def":"updates.available = function(isavailable)","name":"available","doc":"Called after updates.check() runs, with a boolean parameter specifying whether an update is available. Default implementation pushes a notification when an update is available with the tag 'showupdate'."},{"def":"updates.check()","name":"check","doc":"Checks for an update. If one is available, calls updates.available(true); otherwise calls updates.available(false)."}],"name":"updates","doc":"Check for and install Hydra updates."},{"items":[{"def":"logger.addhandler(fn(str)) -> index","name":"addhandler","doc":"Registers a function to handle new log lines."},{"def":"logger.maxlines = 500","name":"maxlines","doc":"Maximum number of lines to be logged."},{"def":"logger.show() -> textgrid","name":"show","doc":"Opens a textgrid that can browse all logs."},{"def":"logger.lines = {}","name":"lines","doc":"List of lines logged so far; caps at logger.maxlines. You may clear it by setting it to {} yourself."},{"def":"logger.removehandler(index)","name":"removehandler","doc":"Unregisters a function that handles new log lines."}],"name":"logger","doc":"Functionality to assist with debugging and experimentation."},{"items":[{"def":"utf8.chars(str) -> {str, ...}","name":"chars","doc":"Splits the string into groups of (UTF-8 encoded) strings representing what humans would consider individual characters.\n\nThe result is a sequential table, such that table.concat(result) produces the original string."},{"def":"utf8.count(str) -> int","name":"count","doc":"Returns the number of characters as humans would count them."}],"name":"utf8","doc":"Utilities for handling UTF-8 strings 'correctly'."},{"items":[{"def":"mouse.set(point)","name":"set","doc":"Moves the mouse to the given location on the current screen."},{"def":"mouse.get() -> point","name":"get","doc":"Returns the current location of the mouse on the current screen as a point."}],"name":"mouse","doc":"Functions for manipulating the mouse cursor."},{"items":[{"def":"pathwatcher.stopall()","name":"stopall","doc":"Calls p:stop() for all started pathwatchers; called automatically when user config reloads."},{"def":"pathwatcher:start()","name":"start","doc":"Registers pathwatcher's fn as a callback when pathwatcher's path or any descendent changes."},{"def":"pathwatcher:stop()","name":"stop","doc":"Unregisters pathwatcher's fn so it won't be called again until the pathwatcher is restarted."},{"def":"pathwatcher.new(path, fn())","name":"new","doc":"Returns a new pathwatcher that can be started and stopped. Contains fields: path, fn."}],"name":"pathwatcher","doc":"Watch paths recursively for changes.\n\nThis simple example watches your Hydra directory for changes, and when it sees a change, reloads your configs:\n\n    pathwatcher.new(os.getenv(\"HOME\") .. \"\/.hydra\/\", hydra.reload):start()"},{"items":[{"def":"hotkey:enable() -> self","name":"enable","doc":"Registers the hotkey's fn as the callback when the user presses key while holding mods."},{"def":"hotkey.disableall()","name":"disableall","doc":"Disables all hotkeys; automatically called when user config reloads."},{"def":"hotkey:disable() -> self","name":"disable","doc":"Disables the given hotkey; does not remove it from hotkey.keys."},{"def":"hotkey.bind(...) -> hotkey","name":"bind","doc":"Shortcut for: return hotkey.new(...):enable()"},{"def":"hotkey.new(mods, key, fn) -> hotkey","name":"new","doc":"Creates a new hotkey that can be enabled. Mods is a table containing any of the elements {cmd, ctrl, alt, shift}. Key may be any 1-character string, or 'F1', 'Enter', etc. Both are case-insensitive. The hotkey has the public fields: key, mods, fn."}],"name":"hotkey","doc":"Manage global hotkeys."},{"items":[{"def":"screen.mainscreen() -> screen","name":"mainscreen","doc":"Returns the 'main' screen, i.e. the one containing the currently focused window."},{"def":"screen:frame_without_dock_or_menu() -> rect","name":"frame_without_dock_or_menu","doc":"Returns the screen's rect in absolute coordinates, without the dock or menu."},{"def":"screen.frame(screen) -> rect","name":"frame","doc":"Returns a screen's frame in its own coordinate space."},{"def":"screen.allscreens() -> screen[]","name":"allscreens","doc":"Returns all the screens there are."},{"def":"screen.settint(redarray, greenarray, bluearray)","name":"settint","doc":"Set the tint on a screen; experimental."},{"def":"screen.visibleframe(screen) -> rect","name":"vislbleframe","doc":"Returns a screen's frame in its own coordinate space, without the dock or menu."},{"def":"screen:frame_including_dock_and_menu() -> rect","name":"frame_including_dock_and_menu","doc":"Returns the screen's rect in absolute coordinates, including the dock and menu."},{"def":"screen:previous() -> screen","name":"previous","doc":"Returns the screen 'before' this one; I have no idea how they're ordered though."},{"def":"screen:next() -> screen","name":"next","doc":"Returns the screen 'after' this one; I have no idea how they're ordered though."}],"name":"screen","doc":"Manipulate screens (i.e. monitors).\n\nYou usually get a screen through a window (see `window.screen`). But you can get screens by themselves through this module, albeit not in any defined\/useful order.\n\nHydra's coordinate system assumes a grid that is the union of every screen's rect (see `screen.frame_including_dock_and_menu`).\n\nEvery window's position (i.e. `topleft`) and size are relative to this grid, and they're usually within the grid. A window that's semi-offscreen only intersects the grid."},{"items":[{"def":"hydra.call(fn, ...) -> ...","name":"call","doc":"Just like pcall, except that failures are handled using hydra.errorhandler"},{"def":"hydra.repl([opts]) -> textgrid","name":"repl","doc":"Opens a readline-like REPL (Read-Eval-Print-Loop) that has full access to Hydra's API; type 'help' for more info.\n\nOptional `opts` arg can be a table with keys: inputcolor, stdoutcolor, resultcolor, backgroundcolor."},{"def":"hydra.errorhandler = function(err)","name":"errorhandler","doc":"Error handler for hydra.call; intended for you to set, not for third party libs"},{"def":"hydra.check_accessibility(shouldprompt) -> isenabled","name":"check_accessibility","doc":"Returns whether accessibility is enabled. If passed `true`, prompts the user to enable it."},{"def":"hydra.reload()","name":"reload","doc":"Reloads your init-file. Makes sure to clear any state that makes sense to clear (hotkeys, pathwatchers, etc)."},{"def":"hydra.focushydra()","name":"focushydra","doc":"Makes Hydra the currently focused app; useful in combination with textgrids."},{"def":"hydra.resourcesdir -> string","name":"resourcesdir","doc":"The path of the built-in lua source files, with no trailing slash."},{"def":"hydra.indock() -> bool","name":"indock","doc":"Returns whether Hydra has a Dock icon, and thus can be switched to via Cmd-Tab."},{"def":"hydra.douserfile(name)","name":"douserfile","doc":"Convenience wrapper around dofile() and hydra.userfile(name)"},{"def":"hydra.uuid() -> string","name":"uuid","doc":"Returns a UUID as a string"},{"def":"hydra.exec(command) -> string","name":"exec","doc":"Runs a shell function and returns stdout as a string (without trailing newline)."},{"def":"hydra.putindock(bool)","name":"putindock","doc":"Sets whether Hydra has a Dock icon, and thus can be switched to via Cmd-Tab."},{"def":"hydra.fileexists(path) -> exists, isdir","name":"fileexists","doc":"Checks if a file exists, and whether it's a directory."},{"def":"hydra.alert(str, seconds = 2)","name":"alert","doc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.."},{"def":"hydra.showabout()","name":"showabout","doc":"Displays the standard OS X about panel; implicitly focuses Hydra."},{"def":"hydra.userfile(name)","name":"userfile","doc":"Returns the full path to the file ~\/.hydra\/{name}.lua"}],"name":"hydra","doc":"General stuff."},{"items":[{"def":"window:isvisible() -> bool","name":"isvisible","doc":"True if the app is not hidden or minimized."},{"def":"window.allwindows() -> win[]","name":"allwindows","doc":"Returns all windows"},{"def":"window:topleft() -> point","name":"topleft","doc":"The top-left corner of the window in absolute coordinates."},{"def":"window:application() -> app","name":"application","doc":"Returns the app that the window belongs to."},{"def":"window:otherwindows_samescreen() -> win[]","name":"otherwindows_samescreen","doc":"Get other windows on the same screen as self."},{"def":"window:becomemain() -> bool","name":"becomemain","doc":"Make this window the main window of the given application; deos not implicitly focus the app."},{"def":"window:settopleft(point)","name":"settopleft","doc":"Moves the window to the given point in absolute coordinate."},{"def":"window:otherwindows_allscreens() -> win[]","name":"otherwindows_allscreens","doc":"Get every window except this one."},{"def":"window:unminimize()","name":"unminimize","doc":"Un-minimizes the window."},{"def":"window.focusedwindow() -> window","name":"focusedwindow","doc":"Returns the focused window, or nil."},{"def":"window:minimize()","name":"minimize","doc":"Minimizes the window."},{"def":"window:focus() -> bool","name":"focus","doc":"Try to make this window focused."},{"def":"window:focuswindow_west()","name":"focuswindow_west","doc":"Focus the first focus-able window to the west of this one."},{"def":"window.orderedwindows() -> win[]","name":"orderedwindows","doc":"Returns all visible windows, ordered from front to back."},{"def":"window:focuswindow_south()","name":"focuswindow_south","doc":"Focus the first focus-able window to the south of this one."},{"def":"window:screen()","name":"screen","doc":"Get the screen this window is mostly on."},{"def":"window:windows_to_south()","name":"windows_to_south","doc":"Get all windows south of this one, ordered by closeness."},{"def":"window:focuswindow_north()","name":"focuswindow_north","doc":"Focus the first focus-able window to the north of this one."},{"def":"window:role() -> string","name":"role","doc":"Returns the role of the window, whatever that means."},{"def":"window:focuswindow_east()","name":"focuswindow_east","doc":"Focus the first focus-able window to the east of this one."},{"def":"window:frame() -> rect","name":"frame","doc":"Get the frame of the window in absolute coordinates."},{"def":"window:windows_to_east()","name":"windows_to_east","doc":"Get all windows east of this one, ordered by closeness."},{"def":"window:size() -> size","name":"size","doc":"The size of the window."},{"def":"window:windows_to_north()","name":"windows_to_north","doc":"Get all windows north of this one, ordered by closeness."},{"def":"window:isminimized() -> bool","name":"isminimized","doc":"True if the window is currently minimized in the dock."},{"def":"window:maximize()","name":"maximize","doc":"Make this window fill the whole screen its on, without covering the dock or menu."},{"def":"window:setsize(size)","name":"setsize","doc":"Resizes the window."},{"def":"window:windows_to_west()","name":"windows_to_west","doc":"Get all windows west of this one, ordered by closeness."},{"def":"window.visiblewindows() -> win[]","name":"visiblewindows","doc":"Get all windows on all screens that match window.isvisible."},{"def":"window:title() -> string","name":"title","doc":"Returns the title of the window (as UTF8)."},{"def":"window:subrole() -> string","name":"subrole","doc":"Returns the subrole of the window, whatever that means."},{"def":"window:isstandard() -> bool","name":"isstandard","doc":"True if the window's subrole indicates it's 'a standard window'."},{"def":"window:setframe(rect)","name":"setframe","doc":"Set the frame of the window in absolute coordinates."}],"name":"window","doc":"Functions for managing any window.\n\nTo get windows, see `window.focusedwindow` and `window.visiblewindows`.\n\nTo get window geometrical attributes, see `window.{frame,size,topleft}`.\n\nTo move and resize windows, see `window.set{frame,size,topleft}`.\n\nIt may be handy to get a window's app or screen via `window.application` and `window.screen`.\n\nSee the `screen` module for detailed explanation of how Hydra uses window\/screen coordinates."},{"items":[{"def":"menu.show(fn() -> itemstable)","name":"show","doc":"Shows Hyra's menubar icon. The function should return a table of tables with keys: title, fn, checked (optional), disabled (optional)"},{"def":"menu.hide()","name":"hide","doc":"Hides Hydra's menubar icon."}],"name":"menu","doc":"Control Hydra's menu-bar icon.\n\nHere's a simple example:\n\n    menu.show(function()\n      return {\n        {title = 'About Hydra', fn = hydra.showabout},\n        {title = '-'},\n        {title = 'Quit', fn = os.exit},\n      }\n    end)"},{"items":[{"def":"timer.weeks(n) -> sec","name":"weeks","doc":"Returns the number of weeks in seconds."},{"def":"timer.runonce(fn())","name":"runonce","doc":"Runs the function exactly once in the entire lifespan of Hydra; reset only when you quit\/restart."},{"def":"timer:stop() -> timer","name":"stop","doc":"Stops the timer's fn from getting called until started again."},{"def":"timer.doafter(sec, fn())","name":"doafter","doc":"Runs the function after sec seconds."},{"def":"timer.minutes(n) -> sec","name":"minutes","doc":"Returns the number of minutes in seconds."},{"def":"timer.stopall()","name":"stopall","doc":"Stops all running timers; called automatically when user config reloads."},{"def":"timer:start() -> timer","name":"start","doc":"Begins to execute timer.fn every timer.seconds; calling this does not cause an initial firing of the timer immediately."},{"def":"timer.seconds(n) -> sec","name":"seconds","doc":"Returns the number of seconds in seconds."},{"def":"timer.hours(n) -> sec","name":"hours","doc":"Returns the number of hours in seconds."},{"def":"timer.days(n) -> sec","name":"days","doc":"Returns the number of days in seconds."},{"def":"timer.new(seconds, fn) -> timer","name":"new","doc":"Creates a new timer that can be started. Has the fields: seconds, fn."}],"name":"timer","doc":"Execute functions with various timing rules."},{"items":[{"def":"settings.get(key) -> val","name":"get","doc":"Gets the Lua value for the given string key."},{"def":"settings.set(key, val)","name":"set","doc":"Saves the given value for the string key; value must be a string, number, boolean, nil, or a table of any of these, recursively."}],"name":"settings","doc":"Functions for user-defined settings that persist across Hydra launches."},{"items":[{"def":"application:bundleid() -> string","name":"bundleid","doc":"Returns the bundle identifier of the app."},{"def":"application.applicationforpid(pid) -> app or nil","name":"applicationforpid","doc":"Returns the running app for the given pid, if it exists."},{"def":"application.launchorfocus(name)","name":"launchorfocus","doc":"Launches the app with the given name, or activates it if it's already running."},{"def":"application:unhide()","name":"unhide","doc":"Unhides the app (and all its windows) if it's hidden."},{"def":"application:visiblewindows() -> win[]","name":"visiblewindows","doc":"Returns only the app's windows that are visible."},{"def":"application:activate() -> bool","name":"activate","doc":"Tries to activate the app (make it focused) and returns its success."},{"def":"application:kill()","name":"kill","doc":"Tries to terminate the app."},{"def":"application:allwindows() -> window[]","name":"allwindows","doc":"Returns all open windows owned by the given app."},{"def":"application.applicationsforbundleid(bundleid) -> app[]","name":"applicationsforbundleid","doc":"Returns any running apps that have the given bundleid."},{"def":"application:hide()","name":"hide","doc":"Hides the app (and all its windows)."},{"def":"application:ishidden() -> bool","name":"ishidden","doc":"Returns whether the app is currently hidden."},{"def":"application:kill9()","name":"kill9","doc":"Assuredly terminates the app."},{"def":"application.runningapplications() -> app[]","name":"runningapplications","doc":"Returns all running apps."},{"def":"application:title() -> string","name":"title","doc":"Returns the localized name of the app (in UTF8)."}],"name":"application","doc":"Manipulate running applications."},{"items":[{"def":"webview.closed = function()","name":"closed","doc":"Called (if set) when the webview closes."},{"def":"webview.open()","name":"open","doc":"Opens and returns a new webview instance; as with all other Hydra objects, it's just a table, and you're free to set whatever keys you want on it."},{"def":"webview:setignoresmouse(bool)","name":"setignoresmouse","doc":"Set whether a webview window can be interacted with via the mouse."},{"def":"webview:loadstring(string, basepath)","name":"loadstring","doc":"Loads the given string in the webview; basepath must be an absolute path."},{"def":"webview:loadfile(path)","name":"loadfile","doc":"Loads the given file in the web view."},{"def":"webview:settitle(string)","name":"settitle","doc":"Set the title of a webview window."},{"def":"webview:window() -> window","name":"window","doc":"Return the window that represents the given webview."},{"def":"webview:setlevel(level)","name":"setlevel","doc":"When level is -1, window is always below all others; when 0, window is normal; when 1, window is above all others."},{"def":"webview.clicked = function(str)","name":"clicked","doc":"When a link is clicked with a URL like 'hydra:foo', this function is called (if set) with 'foo' as its argument."},{"def":"webview:sethasborder(bool)","name":"sethasborder","doc":"Set whether a webview window has a border."},{"def":"webview:sethasshadow(bool)","name":"sethasshadow","doc":"Set whether a webview window has a shadow."},{"def":"webview:loadurl(url)","name":"loadurl","doc":"Loads the given URL in the webview."}],"name":"webview","doc":"For showing stuff in web views!"},{"items":[{"def":"geometry.rect(x, y, w, y) -> rect","name":"rect","doc":"Convenience function for creating a rect-table."},{"def":"geometry.intersectionrect(rect1, rect2) -> rect3","name":"intersectionrect","doc":"Returns the intersection of two rects as a new rect."},{"def":"geometry.point(x, y) -> point","name":"point","doc":"Convenience function for creating a point-table."},{"def":"geometry.rectmidpoint(r) -> point","name":"rectmidpoint","doc":"Returns the midpoint of a rect."},{"def":"geometry.size(w, h) -> size","name":"size","doc":"Convenience function for creating a size-table."},{"def":"geometry.hypot(point) -> number","name":"hypot","doc":"Returns hypotenuse of a line defined from 0,0 to point."},{"def":"geometry.rotateccw(point, aroundpoint, ntimes = 1) -> point","name":"rotateccw","doc":"Rotates a point around another point N times."}],"name":"geometry","doc":"Mathy stuff."},{"items":{},"name":"ext","doc":"Standard high-level namespace for third-party extensions."},{"items":[{"def":"textgrid:usefont(name, pointsize)","name":"usefont","doc":"Sets the new font of the textgrid, potentially changing its visible size (no resize event is fired)."},{"def":"textgrid:resize(size)","name":"resize","doc":"Resizes the textgrid to the number of rows and columns given in the size-table with keys {x,y}."},{"def":"textgrid:setfg(str)","name":"setfg","doc":"Sets the textgrid's foreground color to the given 6-digit hex string."},{"def":"textgrid:settitle(title)","name":"settitle","doc":"Changes the title of the textgrid window."},{"def":"textgrid.closeall()","name":"closeall","doc":"Closes all non-protected textgrids; called automatically when user config is reloaded."},{"def":"textgrid:window() -> window","name":"window","doc":"Returns the window that represents this textgrid."},{"def":"textgrid:sethasshadow(bool)","name":"sethasshadow","doc":"Set whether a textgrid window has a shadow."},{"def":"textgrid:getsize() -> size","name":"getsize","doc":"Returns the size (nubmer of rows and columns) as a size-table with keys {x,y}."},{"def":"textgrid:clear()","name":"clear","doc":"Replaces all the textgrid's text with space characters."},{"def":"textgrid:closed = function()","name":"closed","doc":"Calls the given function when the textgrid is closed. Defaults to nil."},{"def":"textgrid.open() -> textgrid","name":"open","doc":"Opens a new textgrid window."},{"def":"textgrid:protect()","name":"protect","doc":"Prevents the textgrid from closing when your config is reloaded."},{"def":"textgrid:getfont() -> name, pointsize","name":"getfont","doc":"Gets the name and pointsize currently used in the textgrid."},{"def":"textgrid:setbg(str)","name":"setbg","doc":"Sets the textgrid's background color to the given 6-digit hex string."},{"def":"textgrid.textgrids = {}","name":"textgrids","doc":"All currently open textgrid windows; do not mutate this at all."},{"def":"textgrid:setcharbg(str, x, y)","name":"setcharbg","doc":"Sets the textgrid's background color to the given 6-digit hex string at the given coordinate."},{"def":"textgrid:setchar(str, x, y)","name":"set","doc":"Sets the given 1-character UTF-8 encoded string at the given grid coordinates."},{"def":"textgrid:focus()","name":"focus","doc":"Brings the textgrid to front and focuses it; implicitly focuses Hydra."},{"def":"textgrid:keydown = function(t)","name":"keydown","doc":"Calls the given function when a key is pressed in the focused textgrid. The table t contains keys {ctrl, alt, cmd, key}. Defaults to nil."},{"def":"textgrid:sethasborder(bool)","name":"sethasborder","doc":"Set whether a textgrid window has a border."},{"def":"textgrid:close()","name":"close","doc":"Closes the given textgrid window."},{"def":"textgrid:resized = function()","name":"resized","doc":"Calls the given function when the textgrid is resized. Defaults to nil."},{"def":"textgrid:setcharfg(str, x, y)","name":"setcharfg","doc":"Sets the textgrid's foreground color to the given 6-digit hex string at the given coordinate."}],"name":"textgrid","doc":"Super easy in-Hydra GUI windows."},{"items":[{"def":"json.decode(str) -> val","name":"decode","doc":"Returns a Lua value representing the given JSON string."},{"def":"json.encode(val[, prettyprint?]) -> str","name":"encode","doc":"Returns a JSON string representing the given value; if prettyprint is true, the resulting string will be quite beautiful."}],"name":"json","doc":"Functions for converting between Lua values and JSON strings."},{"items":[{"def":"autolaunch.set(bool)","name":"set","doc":"Sets whether Hydra launches when you login."},{"def":"autolaunch.get() -> bool","name":"get","doc":"Returns whether Hydra launches when you login."}],"name":"autolaunch","doc":"Functions for controlling whether Hydra launches at login.\n\nTo make sure Hydra launches at login, put this in your config:\n\n    autolaunch.set(true)"},{"items":[{"def":"notify.register(tag, fn()) -> id","name":"register","doc":"Registers a function to be called when an Apple notification with the given tag is clicked."},{"def":"notify.unregister(id)","name":"unregister","doc":"Unregisters a function to no longer be called when an Apple notification with the given tag is clicked."},{"def":"notify.show(title, subtitle, text, tag)","name":"show","doc":"Show an Apple notification. Tag is a unique string that identifies this notification, and will be passed to notify.clicked() if the notification is clicked. None of the strings are optional, though they may each be blank."},{"def":"notify.unregisterall()","name":"unregisterall","doc":"Unregisters all functions registered for notification-clicks; called automatically when user config reloads."}],"name":"notify","doc":"Apple's built-in notifications system."}]
