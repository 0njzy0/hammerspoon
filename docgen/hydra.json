[{"doc":"Standard high-level namespace for third-party extensions.","name":"ext","items":{}},{"doc":"Watch paths recursively for changes.","name":"pathwatcher","items":[{"doc":"Unregisters pathwatcher's fn so it won't be called again until the pathwatcher is restarted.","name":"stop","def":"pathwatcher:stop()"},{"doc":"Returns a new pathwatcher that can be started and stopped. Contains fields: path, fn.","name":"new","def":"pathwatcher.new(path, fn())"},{"doc":"Registers pathwatcher's fn as a callback when pathwatcher's path or any descendent changes.","name":"start","def":"pathwatcher:start()"},{"doc":"Calls p:stop() for all started pathwatchers; called automatically when user config reloads.","name":"stopall","def":"pathwatcher.stopall()"}]},{"doc":"Check for and install Hydra updates.","name":"updates","items":[{"doc":"Called after updates.check() runs, with a boolean parameter specifying whether an update is available. Default implementation pushes a notification when an update is available with the tag 'showupdate'.","name":"available","def":"updates.available = function(isavailable)"},{"doc":"Checks for an update. If one is available, calls updates.available(true); otherwise calls updates.available(false).","name":"check","def":"updates.check()"}]},{"doc":"Functionality to assist with debugging and experimentation.","name":"logger","items":[{"doc":"Opens a textgrid that can browse all logs.","name":"show","def":"logger.show() -> textgrid"},{"doc":"Registers a function to handle new log lines.","name":"addhandler","def":"logger.addhandler(fn(str)) -> index"},{"doc":"Unregisters a function that handles new log lines.","name":"removehandler","def":"logger.removehandler(index)"},{"doc":"Maximum number of lines to be logged.","name":"maxlines","def":"logger.maxlines = 500"},{"doc":"List of lines logged so far; caps at logger.maxlines. You may clear it by setting it to {} yourself.","name":"lines","def":"logger.lines = {}"}]},{"doc":"Utilities for handling UTF-8 strings 'correctly'.","name":"utf8","items":[{"doc":"Returns the number of characters as humans would count them.","name":"count","def":"utf8.count(str) -> int"},{"doc":"Splits the string into groups of (UTF-8 encoded) strings representing what humans would consider individual characters.\n\nThe result is a sequential table, such that table.concat(result) produces the original string.","name":"chars","def":"utf8.chars(str) -> {str, ...}"}]},{"doc":"General stuff.","name":"hydra","items":[{"doc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience..","name":"alert","def":"alert(str, seconds = 2)"},{"doc":"The path of the built-in lua source files, with no trailing slash.","name":"resourcesdir","def":"hydra.resourcesdir -> string"},{"doc":"Makes Hydra the currently focused app; useful in combination with textgrids.","name":"focushydra","def":"focushydra()"},{"doc":"Opens a readline-like REPL (Read-Eval-Print-Loop) that has full access to Hydra's API; type 'help' for more info.","name":"repl","def":"hydra.repl() -> textgrid"},{"doc":"Returns the full path to the file ~\/.hydra\/{name}.lua","name":"userfile","def":"hydra.userfile(name)"},{"doc":"Just like pcall, except that failures are handled using hydra.errorhandler","name":"call","def":"hydra.call(fn, ...) -> ..."},{"doc":"Reloads your init-file. Makes sure to clear any state that makes sense to clear (hotkeys, pathwatchers, etc).","name":"reload","def":"hydra.reload()"},{"doc":"Runs a shell function and returns stdout as a string (without trailing newline).","name":"exec","def":"hydra.exec(command) -> string"},{"doc":"Returns a UUID as a string","name":"uuid","def":"hydra.uuid() -> string"},{"doc":"Checks if a file exists, and whether it's a directory.","name":"fileexists","def":"fileexists(path) -> exists, isdir"},{"doc":"Displays the standard OS X about panel; implicitly focuses Hydra.","name":"showabout","def":"showabout()"},{"doc":"Convenience wrapper around dofile() and hydra.userfile(name)","name":"douserfile","def":"hydra.douserfile(name)"},{"doc":"Error handler for hydra.call; intended for you to set, not for third party libs","name":"errorhandler","def":"hydra.errorhandler = function(err)"},{"doc":"Returns whether accessibility is enabled. If passed `true`, prompts the user to enable it.","name":"check_accessibility","def":"check_accessibility(shouldprompt) -> isenabled"}]},{"doc":"Execute functions with various timing rules.","name":"timer","items":[{"doc":"Runs the function exactly once in the entire lifespan of Hydra; reset only when you quit\/restart.","name":"runonce","def":"timer.runonce(fn())"},{"doc":"Stops the timer's fn from getting called until started again.","name":"stop","def":"timer:stop() -> timer"},{"doc":"Returns the number of seconds in seconds.","name":"seconds","def":"timer.seconds(n) -> sec"},{"doc":"Begins to execute timer.fn every timer.seconds; calling this does not cause an initial firing of the timer immediately.","name":"start","def":"timer:start() -> timer"},{"doc":"Stops all running timers; called automatically when user config reloads.","name":"stopall","def":"timer.stopall()"},{"doc":"Returns the number of weeks in seconds.","name":"weeks","def":"timer.weeks(n) -> sec"},{"doc":"Creates a new timer that can be started. Has the fields: seconds, fn.","name":"new","def":"timer.new(seconds, fn) -> timer"},{"doc":"Returns the number of days in seconds.","name":"days","def":"timer.days(n) -> sec"},{"doc":"Returns the number of hours in seconds.","name":"hours","def":"timer.hours(n) -> sec"},{"doc":"Returns the number of minutes in seconds.","name":"minutes","def":"timer.minutes(n) -> sec"},{"doc":"Runs the function after sec seconds.","name":"doafter","def":"timer.doafter(sec, fn())"}]},{"doc":"Apple's built-in notifications system.","name":"notify","items":[{"doc":"Registers a function to be called when an Apple notification with the given tag is clicked.","name":"register","def":"notify.register(tag, fn()) -> id"},{"doc":"Unregisters a function to no longer be called when an Apple notification with the given tag is clicked.","name":"unregister","def":"notify.unregister(id)"},{"doc":"Unregisters all functions registered for notification-clicks; called automatically when user config reloads.","name":"unregisterall","def":"notify.unregisterall()"},{"doc":"Show an Apple notification. Tag is a unique string that identifies this notification, and will be passed to notify.clicked() if the notification is clicked. None of the strings are optional, though they may each be blank.","name":"show","def":"notify.show(title, subtitle, text, tag)"}]},{"doc":"Control Hydra's menu-bar icon.","name":"menu","items":[{"doc":"Shows Hyra's menubar icon. The function should return a table of tables with keys: title, fn, checked (optional), disabled (optional)","name":"show","def":"menu.show(fn() -> itemstable)"},{"doc":"Hides Hydra's menubar icon.","name":"hide","def":"menu.hide()"}]},{"doc":"Mathy stuff.","name":"geometry","items":[{"doc":"Returns the midpoint of a rect.","name":"rectmidpoint","def":"geometry.rectmidpoint(r) -> point"},{"doc":"Convenience function for creating a point-table.","name":"point","def":"geometry.point(x, y) -> point"},{"doc":"Convenience function for creating a rect-table.","name":"rect","def":"geometry.rect(x, y, w, y) -> rect"},{"doc":"Convenience function for creating a size-table.","name":"size","def":"geometry.size(w, h) -> size"},{"doc":"Returns the intersection of two rects as a new rect.","name":"intersectionrect","def":"geometry.intersectionrect(rect1, rect2) -> rect3"},{"doc":"Returns hypotenuse of a line defined from 0,0 to point.","name":"hypot","def":"geometry.hypot(point) -> number"},{"doc":"Rotates a point around another point N times.","name":"rotateccw","def":"geometry.rotateccw(point, aroundpoint, ntimes = 1) -> point"}]},{"doc":"Manage global hotkeys.","name":"hotkey","items":[{"doc":"Registers the hotkey's fn as the callback when the user presses key while holding mods.","name":"enable","def":"hotkey:enable() -> hotkey"},{"doc":"Disables all hotkeys; automatically called when user config reloads.","name":"disableall","def":"hotkey.disableall()"},{"doc":"Creates a new hotkey that can be enabled. Mods is a table containing any of the elements {cmd, ctrl, alt, shift}. Key may be any 1-character string, or 'F1', 'Enter', etc. Both are case-insensitive. The hotkey has the public fields: key, mods, fn.","name":"new","def":"hotkey.new(mods, key, fn) -> hotkey"},{"doc":"Shortcut for: return hotkey.new(...):enable()","name":"bind","def":"hotkey.bind(...) -> hotkey"},{"doc":"Disables the given hotkey; does not remove it from hotkey.keys.","name":"disable","def":"hotkey:disable() -> self"}]},{"doc":"Functions for converting between Lua values and JSON strings.","name":"json","items":[{"doc":"Returns a JSON string representing the given value; if prettyprint is true, the resulting string will be quite beautiful.","name":"encode","def":"json.encode(val[, prettyprint?]) -> str"},{"doc":"Returns a Lua value representing the given JSON string.","name":"decode","def":"json.decode(str) -> val"}]},{"doc":"Functions for controlling whether Hydra launches at login.","name":"autolaunch","items":[{"doc":"Sets whether Hydra launches when you login.","name":"set","def":"autolaunch.set(bool)"},{"doc":"Returns whether Hydra launches when you login.","name":"get","def":"autolaunch.get() -> bool"}]},{"doc":"Functions for manipulating the mouse cursor.","name":"mouse","items":[{"doc":"Moves the mouse to the given location on the current screen.","name":"set","def":"mouse.set(point)"},{"doc":"Returns the current location of the mouse on the current screen as a point.","name":"get","def":"mouse.get() -> point"}]},{"doc":"For showing stuff in web views!","name":"webview","items":[{"doc":"Loads the given string in the webview; basepath must be an absolute path.","name":"loadstring","def":"webview:loadstring(string, basepath)"},{"doc":"Loads the given URL in the webview.","name":"loadurl","def":"webview:loadurl(url)"},{"doc":"Loads the given file in the web view.","name":"loadfile","def":"webview:loadfile(path)"},{"doc":"Opens and returns a new webview instance; as with all other Hydra objects, it's just a table, and you're free to set whatever keys you want on it.","name":"open","def":"webview.open()"},{"doc":"Return the window that represents the given webview.","name":"window","def":"webview:window() -> window"},{"doc":"Set whether a webview window has a shadow.","name":"sethasshadow","def":"webview:sethasshadow(bool)"},{"doc":"Set whether a webview window has a border.","name":"setborderless","def":"webview:setborderless(bool)"},{"doc":"When a link is clicked with a URL like 'hydra:foo', this function is called (if set) with 'foo' as its argument.","name":"clicked","def":"webview.clicked = function(str)"},{"doc":"Called (if set) when the webview closes.","name":"closed","def":"webview.closed = function()"},{"doc":"Set the title of a webview window.","name":"settitle","def":"webview:settitle(string)"},{"doc":"Set whether a webview window can be interacted with via the mouse.","name":"setignoresmouse","def":"webview:setignoresmouse(bool)"},{"doc":"When level is -1, window is always below all others; when 0, window is normal; when 1, window is above all others.","name":"setlevel","def":"webview:setlevel(level)"}]},{"doc":"Manipulate monitors (aka screens).","name":"screen","items":[{"doc":"Returns the 'main' screen, i.e. the one containing the currently focused window.","name":"mainscreen","def":"screen.mainscreen() -> screen"},{"doc":"Returns a screen's frame in its own coordinate space.","name":"frame","def":"screen.frame(screen) -> rect"},{"doc":"Returns the screen's rect in absolute coordinates, without the dock or menu.","name":"frame_without_dock_or_menu","def":"screen:frame_without_dock_or_menu() -> rect"},{"doc":"Returns the screen's rect in absolute coordinates, including the dock and menu.","name":"frame_including_dock_and_menu","def":"screen:frame_including_dock_and_menu() -> rect"},{"doc":"Returns the screen 'after' this one; I have no idea how they're ordered though.","name":"next","def":"screen:next() -> screen"},{"doc":"Set the tint on a screen; experimental.","name":"settint","def":"screen.settint(redarray, greenarray, bluearray)"},{"doc":"Returns the screen 'before' this one; I have no idea how they're ordered though.","name":"previous","def":"screen:previous() -> screen"},{"doc":"Returns all the screens there are.","name":"allscreens","def":"screen.allscreens() -> screen[]"},{"doc":"Returns a screen's frame in its own coordinate space, without the dock or menu.","name":"vislbleframe","def":"screen.visibleframe(screen) -> rect"}]},{"doc":"Functions for user-defined settings that persist across Hydra launches.","name":"settings","items":[{"doc":"Gets the Lua value for the given string key.","name":"get","def":"settings.get(key) -> val"},{"doc":"Saves the given value for the string key; value must be a string, number, boolean, nil, or a table of any of these, recursively.","name":"set","def":"settings.set(key, val)"}]},{"doc":"Super easy in-Hydra GUI windows.","name":"textgrid","items":[{"doc":"Resizes the textgrid to the number of rows and columns given in the size-table with keys {x,y}.","name":"resize","def":"textgrid:resize(size)"},{"doc":"Prevents the textgrid from closing when your config is reloaded.","name":"protect","def":"textgrid:protect()"},{"doc":"Sets the given 1-character UTF-8 encoded string at the given grid coordinates.","name":"set","def":"textgrid:setchar(str, x, y)"},{"doc":"Replaces all the textgrid's text with space characters.","name":"clear","def":"textgrid:clear()"},{"doc":"Sets the textgrid's foreground color to the given 6-digit hex string.","name":"setfg","def":"textgrid:setfg(str)"},{"doc":"Brings the textgrid to front and focuses it; implicitly focuses Hydra.","name":"focus","def":"textgrid:focus()"},{"doc":"Calls the given function when the textgrid is closed. Defaults to nil.","name":"closed","def":"textgrid:closed = function()"},{"doc":"Changes the title of the textgrid window.","name":"settitle","def":"textgrid:settitle(title)"},{"doc":"Sets the textgrid's background color to the given 6-digit hex string.","name":"setbg","def":"textgrid:setbg(str)"},{"doc":"Calls the given function when a key is pressed in the focused textgrid. The table t contains keys {ctrl, alt, cmd, key}. Defaults to nil.","name":"keydown","def":"textgrid:keydown = function(t)"},{"doc":"Closes all non-protected textgrids; called automatically when user config is reloaded.","name":"closeall","def":"textgrid.closeall()"},{"doc":"All currently open textgrid windows; do not mutate this at all.","name":"textgrids","def":"textgrid.textgrids = {}"},{"doc":"Returns the size (nubmer of rows and columns) as a size-table with keys {x,y}.","name":"getsize","def":"textgrid:getsize() -> size"},{"doc":"Gets the name and pointsize currently used in the textgrid.","name":"getfont","def":"textgrid:getfont() -> name, pointsize"},{"doc":"Opens a new textgrid window.","name":"open","def":"textgrid.open() -> textgrid"},{"doc":"Sets the textgrid's foreground color to the given 6-digit hex string at the given coordinate.","name":"setcharfg","def":"textgrid:setcharfg(str, x, y)"},{"doc":"Closes the given textgrid window.","name":"close","def":"textgrid:close()"},{"doc":"Calls the given function when the textgrid is resized. Defaults to nil.","name":"resized","def":"textgrid:resized = function()"},{"doc":"Returns the window that represents this textgrid.","name":"window","def":"textgrid:window() -> window"},{"doc":"Sets the new font of the textgrid, potentially changing its visible size (no resize event is fired).","name":"usefont","def":"textgrid:usefont(name, pointsize)"},{"doc":"Sets the textgrid's background color to the given 6-digit hex string at the given coordinate.","name":"setcharbg","def":"textgrid:setcharbg(str, x, y)"}]},{"doc":"Super-helpful functional programming utilities.","name":"fnutils","items":[{"doc":"Returns whether the table contains the given element.","name":"contains","def":"fnutils.contains(t, el) -> bool"},{"doc":"Returns the index of a given element in a table, or nil if not found.","name":"indexof","def":"fnutils.indexof(t, el) -> int or nil"},{"doc":"Runs fn(el1, el2) for every el in t, then fn(result, el3), etc, until there's only one left.","name":"reduce","def":"fnutils.reduce(t, fn) -> t2"},{"doc":"Returns a table of the elements in t in which fn(el) is truthy.","name":"filter","def":"fnutils.filter(t, fn) -> t"},{"doc":"Returns the first element where fn(el) is truthy.","name":"find","def":"fnutils.find(t, fn) -> el"},{"doc":"Adds all elements of t2 to the end of t1.","name":"concat","def":"fnutils.concat(t1, t2)"},{"doc":"Returns a table of the results of fn(el) on every el in t.","name":"map","def":"fnutils.map(t, fn) -> t"},{"doc":"Runs fn(el) for every el in t, and assuming the results are tables, combines them into a new table.","name":"mapcat","def":"fnutils.mapcat(t, fn) -> t2"}]},{"doc":"Functions for managing any window","name":"window","items":[{"doc":"True if the window's subrole indicates it's 'a standard window'.","name":"isstandard","def":"window:isstandard() -> bool"},{"doc":"Get all windows on all screens that match window.isvisible.","name":"visiblewindows","def":"window.visiblewindows() -> win[]"},{"doc":"Moves the window to the given point in absolute coordinate.","name":"settopleft","def":"window:settopleft(point)"},{"doc":"Get the frame of the window in absolute coordinates.","name":"frame","def":"window:frame() -> rect"},{"doc":"Make this window fill the whole screen its on, without covering the dock or menu.","name":"maximize","def":"window:maximize()"},{"doc":"Resizes the window.","name":"setsize","def":"window:setsize(size)"},{"doc":"Get every window except this one.","name":"otherwindows_allscreens","def":"window:otherwindows_allscreens() -> win[]"},{"doc":"Get other windows on the same screen as self.","name":"otherwindows_samescreen","def":"window:otherwindows_samescreen() -> win[]"},{"doc":"Focus the first focus-able window to the east of this one.","name":"focuswindow_east","def":"window:focuswindow_east()"},{"doc":"Focus the first focus-able window to the north of this one.","name":"focuswindow_north","def":"window:focuswindow_north()"},{"doc":"Returns the subrole of the window, whatever that means.","name":"subrole","def":"window:subrole() -> string"},{"doc":"Get all windows south of this one, ordered by closeness.","name":"windows_to_south","def":"window:windows_to_south()"},{"doc":"The size of the window.","name":"size","def":"window:size() -> size"},{"doc":"Returns the app that the window belongs to.","name":"application","def":"window:application() -> app"},{"doc":"Returns the role of the window, whatever that means.","name":"role","def":"window:role() -> string"},{"doc":"Get all windows north of this one, ordered by closeness.","name":"windows_to_north","def":"window:windows_to_north()"},{"doc":"Get all windows west of this one, ordered by closeness.","name":"windows_to_west","def":"window:windows_to_west()"},{"doc":"Try to make this window focused.","name":"focus","def":"window:focus() -> bool"},{"doc":"True if the window is currently minimized in the dock.","name":"isminimized","def":"window:isminimized() -> bool"},{"doc":"Get all windows east of this one, ordered by closeness.","name":"windows_to_east","def":"window:windows_to_east()"},{"doc":"Focus the first focus-able window to the south of this one.","name":"focuswindow_south","def":"window:focuswindow_south()"},{"doc":"The top-left corner of the window in absolute coordinates.","name":"topleft","def":"window:topleft() -> point"},{"doc":"Get the screen this window is mostly on.","name":"screen","def":"window:screen()"},{"doc":"Experimental.","name":"visible_windows_sorted_by_recency","def":"window.visible_windows_sorted_by_recency() -> win[]"},{"doc":"True if the app is not hidden or minimized.","name":"isvisible","def":"window:isvisible() -> bool"},{"doc":"Returns the focused window, or nil.","name":"focusedwindow","def":"window.focusedwindow() -> window"},{"doc":"Returns all windows","name":"allwindows","def":"window.allwindows() -> win[]"},{"doc":"Make this window the main window of the given application; deos not implicitly focus the app.","name":"becomemain","def":"window:becomemain() -> bool"},{"doc":"Un-minimizes the window.","name":"unminimize","def":"window:unminimize()"},{"doc":"Set the frame of the window in absolute coordinates.","name":"setframe","def":"window:setframe(rect)"},{"doc":"Minimizes the window.","name":"minimize","def":"window:minimize()"},{"doc":"Returns the title of the window (as UTF8).","name":"title","def":"window:title() -> string"},{"doc":"Focus the first focus-able window to the west of this one.","name":"focuswindow_west","def":"window:focuswindow_west()"}]},{"doc":"Manipulate running applications.","name":"application","items":[{"doc":"Launches the app with the given name, or activates it if it's already running.","name":"launchorfocus","def":"application.launchorfocus(name)"},{"doc":"Returns only the app's windows that are visible.","name":"visiblewindows","def":"application:visiblewindows() -> win[]"},{"doc":"Tries to activate the app (make it focused) and returns its success.","name":"activate","def":"application:activate() -> bool"},{"doc":"Tries to terminate the app.","name":"kill","def":"application:kill()"},{"doc":"Returns whether the app is currently hidden.","name":"ishidden","def":"application:ishidden() -> bool"},{"doc":"Assuredly terminates the app.","name":"kill9","def":"application:kill9()"},{"doc":"Returns the bundle identifier of the app.","name":"bundleid","def":"application:bundleid() -> string"},{"doc":"Returns all open windows owned by the given app.","name":"allwindows","def":"application:allwindows() -> window[]"},{"doc":"Returns the running app for the given pid, if it exists.","name":"applicationforpid","def":"application.applicationforpid(pid) -> app or nil"},{"doc":"Unhides the app (and all its windows) if it's hidden.","name":"unhide","def":"application:unhide()"},{"doc":"Hides the app (and all its windows).","name":"hide","def":"application:hide()"},{"doc":"Returns any running apps that have the given bundleid.","name":"applicationsforbundleid","def":"application.applicationsforbundleid(bundleid) -> app[]"},{"doc":"Returns all running apps.","name":"runningapplications","def":"application.runningapplications() -> app[]"},{"doc":"Returns the localized name of the app (in UTF8).","name":"title","def":"application:title() -> string"}]}]
