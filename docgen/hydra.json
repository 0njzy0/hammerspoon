[{"name":"fnutils","items":[{"name":"mapcat","def":"fnutils.mapcat(t, fn) -> t2","doc":"Runs fn(el) for every el in t, and assuming the results are tables, combines them into a new table."},{"name":"each","def":"fnutils.each(t, fn) -> t","doc":"Runs fn(el) for every el in t."},{"name":"map","def":"fnutils.map(t, fn) -> t","doc":"Returns a table of the results of fn(el) on every el in t."},{"name":"reduce","def":"fnutils.reduce(t, fn) -> t2","doc":"Runs fn(el1, el2) for every el in t, then fn(result, el3), etc, until there's only one left."},{"name":"find","def":"fnutils.find(t, fn) -> el","doc":"Returns the first element where fn(el) is truthy."},{"name":"contains","def":"fnutils.contains(t, el) -> bool","doc":"Returns whether the table contains the given element."},{"name":"concat","def":"fnutils.concat(t1, t2)","doc":"Adds all elements of t2 to the end of t1."},{"name":"indexof","def":"fnutils.indexof(t, el) -> int or nil","doc":"Returns the index of a given element in a table, or nil if not found."},{"name":"filter","def":"fnutils.filter(t, fn) -> t","doc":"Returns a table of the elements in t in which fn(el) is truthy."}],"doc":"Super-helpful functional programming utilities."},{"name":"autolaunch","items":[{"name":"set","def":"autolaunch.set(bool)","doc":"Sets whether Hydra launches when you login."},{"name":"get","def":"autolaunch.get() -> bool","doc":"Returns whether Hydra launches when you login."}],"doc":"Functions for controlling whether Hydra launches at login.\n\nTo make sure Hydra launches at login, put this in your config:\n\n    autolaunch.set(true)"},{"name":"textgrid","items":[{"name":"setcharbg","def":"textgrid:setcharbg(str, x, y)","doc":"Sets the textgrid's background color to the given 6-digit hex string at the given coordinate."},{"name":"setcharfg","def":"textgrid:setcharfg(str, x, y)","doc":"Sets the textgrid's foreground color to the given 6-digit hex string at the given coordinate."},{"name":"closeall","def":"textgrid.closeall()","doc":"Closes all non-protected textgrids; called automatically when user config is reloaded."},{"name":"focus","def":"textgrid:focus()","doc":"Brings the textgrid to front and focuses it; implicitly focuses Hydra."},{"name":"setbg","def":"textgrid:setbg(str)","doc":"Sets the textgrid's background color to the given 6-digit hex string."},{"name":"set","def":"textgrid:setchar(str, x, y)","doc":"Sets the given 1-character UTF-8 encoded string at the given grid coordinates."},{"name":"clear","def":"textgrid:clear()","doc":"Replaces all the textgrid's text with space characters."},{"name":"resized","def":"textgrid:resized = function()","doc":"Calls the given function when the textgrid is resized. Defaults to nil."},{"name":"keydown","def":"textgrid:keydown = function(t)","doc":"Calls the given function when a key is pressed in the focused textgrid. The table t contains keys {ctrl, alt, cmd, key}. Defaults to nil."},{"name":"settitle","def":"textgrid:settitle(title)","doc":"Changes the title of the textgrid window."},{"name":"resize","def":"textgrid:resize(size)","doc":"Resizes the textgrid to the number of rows and columns given in the size-table with keys {x,y}."},{"name":"protect","def":"textgrid:protect()","doc":"Prevents the textgrid from closing when your config is reloaded."},{"name":"sethasborder","def":"textgrid:sethasborder(bool)","doc":"Set whether a textgrid window has a border."},{"name":"getsize","def":"textgrid:getsize() -> size","doc":"Returns the size (nubmer of rows and columns) as a size-table with keys {x,y}."},{"name":"close","def":"textgrid:close()","doc":"Closes the given textgrid window."},{"name":"usefont","def":"textgrid:usefont(name, pointsize)","doc":"Sets the new font of the textgrid, potentially changing its visible size (no resize event is fired)."},{"name":"open","def":"textgrid.open() -> textgrid","doc":"Opens a new textgrid window."},{"name":"closed","def":"textgrid:closed = function()","doc":"Calls the given function when the textgrid is closed. Defaults to nil."},{"name":"getfont","def":"textgrid:getfont() -> name, pointsize","doc":"Gets the name and pointsize currently used in the textgrid."},{"name":"setfg","def":"textgrid:setfg(str)","doc":"Sets the textgrid's foreground color to the given 6-digit hex string."},{"name":"textgrids","def":"textgrid.textgrids = {}","doc":"All currently open textgrid windows; do not mutate this at all."},{"name":"sethasshadow","def":"textgrid:sethasshadow(bool)","doc":"Set whether a textgrid window has a shadow."},{"name":"window","def":"textgrid:window() -> window","doc":"Returns the window that represents this textgrid."}],"doc":"Super easy in-Hydra GUI windows."},{"name":"pathwatcher","items":[{"name":"start","def":"pathwatcher:start()","doc":"Registers pathwatcher's fn as a callback when pathwatcher's path or any descendent changes."},{"name":"new","def":"pathwatcher.new(path, fn())","doc":"Returns a new pathwatcher that can be started and stopped. Contains fields: path, fn."},{"name":"stop","def":"pathwatcher:stop()","doc":"Unregisters pathwatcher's fn so it won't be called again until the pathwatcher is restarted."},{"name":"stopall","def":"pathwatcher.stopall()","doc":"Calls p:stop() for all started pathwatchers; called automatically when user config reloads."}],"doc":"Watch paths recursively for changes.\n\nThis simple example watches your Hydra directory for changes, and when it sees a change, reloads your configs:\n\n    pathwatcher.new(os.getenv(\"HOME\") .. \"\/.hydra\/\", hydra.reload):start()"},{"name":"mouse","items":[{"name":"set","def":"mouse.set(point)","doc":"Moves the mouse to the given location on the current screen."},{"name":"get","def":"mouse.get() -> point","doc":"Returns the current location of the mouse on the current screen as a point."}],"doc":"Functions for manipulating the mouse cursor."},{"name":"ext","items":{},"doc":"Standard high-level namespace for third-party extensions."},{"name":"menu","items":[{"name":"hide","def":"menu.hide()","doc":"Hides Hydra's menubar icon."},{"name":"show","def":"menu.show(fn() -> itemstable)","doc":"Shows Hyra's menubar icon. The function should return a table of tables with keys: title, fn, checked (optional), disabled (optional)"}],"doc":"Control Hydra's menu-bar icon.\n\nHere's a simple example:\n\n    menu.show(function()\n      return {\n        {title = 'About Hydra', fn = hydra.showabout},\n        {title = '-'},\n        {title = 'Quit', fn = os.exit},\n      }\n    end)"},{"name":"window","items":[{"name":"setsize","def":"window:setsize(size)","doc":"Resizes the window."},{"name":"focuswindow_west","def":"window:focuswindow_west()","doc":"Focus the first focus-able window to the west of this one."},{"name":"focus","def":"window:focus() -> bool","doc":"Try to make this window focused."},{"name":"minimize","def":"window:minimize()","doc":"Minimizes the window."},{"name":"otherwindows_samescreen","def":"window:otherwindows_samescreen() -> win[]","doc":"Get other windows on the same screen as self."},{"name":"windows_to_north","def":"window:windows_to_north()","doc":"Get all windows north of this one, ordered by closeness."},{"name":"isminimized","def":"window:isminimized() -> bool","doc":"True if the window is currently minimized in the dock."},{"name":"maximize","def":"window:maximize()","doc":"Make this window fill the whole screen its on, without covering the dock or menu."},{"name":"unminimize","def":"window:unminimize()","doc":"Un-minimizes the window."},{"name":"setframe","def":"window:setframe(rect)","doc":"Set the frame of the window in absolute coordinates."},{"name":"frame","def":"window:frame() -> rect","doc":"Get the frame of the window in absolute coordinates."},{"name":"visiblewindows","def":"window.visiblewindows() -> win[]","doc":"Get all windows on all screens that match window.isvisible."},{"name":"focusedwindow","def":"window.focusedwindow() -> window","doc":"Returns the focused window, or nil."},{"name":"focuswindow_east","def":"window:focuswindow_east()","doc":"Focus the first focus-able window to the east of this one."},{"name":"settopleft","def":"window:settopleft(point)","doc":"Moves the window to the given point in absolute coordinate."},{"name":"size","def":"window:size() -> size","doc":"The size of the window."},{"name":"otherwindows_allscreens","def":"window:otherwindows_allscreens() -> win[]","doc":"Get every window except this one."},{"name":"windows_to_east","def":"window:windows_to_east()","doc":"Get all windows east of this one, ordered by closeness."},{"name":"windows_to_south","def":"window:windows_to_south()","doc":"Get all windows south of this one, ordered by closeness."},{"name":"role","def":"window:role() -> string","doc":"Returns the role of the window, whatever that means."},{"name":"allwindows","def":"window.allwindows() -> win[]","doc":"Returns all windows"},{"name":"topleft","def":"window:topleft() -> point","doc":"The top-left corner of the window in absolute coordinates."},{"name":"becomemain","def":"window:becomemain() -> bool","doc":"Make this window the main window of the given application; deos not implicitly focus the app."},{"name":"focuswindow_south","def":"window:focuswindow_south()","doc":"Focus the first focus-able window to the south of this one."},{"name":"isstandard","def":"window:isstandard() -> bool","doc":"True if the window's subrole indicates it's 'a standard window'."},{"name":"focuswindow_north","def":"window:focuswindow_north()","doc":"Focus the first focus-able window to the north of this one."},{"name":"screen","def":"window:screen()","doc":"Get the screen this window is mostly on."},{"name":"title","def":"window:title() -> string","doc":"Returns the title of the window (as UTF8)."},{"name":"orderedwindows","def":"window.orderedwindows() -> win[]","doc":"Returns all visible windows, ordered from front to back."},{"name":"subrole","def":"window:subrole() -> string","doc":"Returns the subrole of the window, whatever that means."},{"name":"windows_to_west","def":"window:windows_to_west()","doc":"Get all windows west of this one, ordered by closeness."},{"name":"application","def":"window:application() -> app","doc":"Returns the app that the window belongs to."},{"name":"isvisible","def":"window:isvisible() -> bool","doc":"True if the app is not hidden or minimized."}],"doc":"Functions for managing any window.\n\nTo get windows, see `window.focusedwindow` and `window.visiblewindows`.\n\nTo get window geometrical attributes, see `window.{frame,size,topleft}`.\n\nTo move and resize windows, see `window.set{frame,size,topleft}`.\n\nIt may be handy to get a window's app or screen via `window.application` and `window.screen`.\n\nSee the `screen` module for detailed explanation of how Hydra uses window\/screen coordinates."},{"name":"logger","items":[{"name":"maxlines","def":"logger.maxlines = 500","doc":"Maximum number of lines to be logged."},{"name":"addhandler","def":"logger.addhandler(fn(str)) -> index","doc":"Registers a function to handle new log lines."},{"name":"show","def":"logger.show() -> textgrid","doc":"Opens a textgrid that can browse all logs."},{"name":"lines","def":"logger.lines = {}","doc":"List of lines logged so far; caps at logger.maxlines. You may clear it by setting it to {} yourself."},{"name":"removehandler","def":"logger.removehandler(index)","doc":"Unregisters a function that handles new log lines."}],"doc":"Functionality to assist with debugging and experimentation."},{"name":"repl","items":[{"name":"open","def":"repl.open([opts]) -> textgrid","doc":"Opens a new REPL; the `opts` parameter is an optional table with keys: inputcolor, stdoutcolor, resultcolor, backgroundcolor; these are 6-digit CSS-like hex strings."}],"doc":"The REPL (Read-Eval-Print-Loop) is excellent for exploring and experiment with Hydra's API.\n\nIt has most of the familiar readline-like keybindings, including C-b, C-f, M-b, M-f to navigate your text, C-p and C-n to browse command history, etc.\n\nType `help` in the REPL for info on how to use the documentation system."},{"name":"updates","items":[{"name":"check","def":"updates.check()","doc":"Checks for an update. If one is available, calls updates.available(true); otherwise calls updates.available(false)."},{"name":"available","def":"updates.available = function(isavailable)","doc":"Called after updates.check() runs, with a boolean parameter specifying whether an update is available. Default implementation pushes a notification when an update is available with the tag 'showupdate'."}],"doc":"Check for and install Hydra updates."},{"name":"webview","items":[{"name":"settitle","def":"webview:settitle(string)","doc":"Set the title of a webview window."},{"name":"sethasshadow","def":"webview:sethasshadow(bool)","doc":"Set whether a webview window has a shadow."},{"name":"sethasborder","def":"webview:sethasborder(bool)","doc":"Set whether a webview window has a border."},{"name":"clicked","def":"webview.clicked = function(str)","doc":"When a link is clicked with a URL like 'hydra:foo', this function is called (if set) with 'foo' as its argument."},{"name":"loadurl","def":"webview:loadurl(url)","doc":"Loads the given URL in the webview."},{"name":"window","def":"webview:window() -> window","doc":"Return the window that represents the given webview."},{"name":"setlevel","def":"webview:setlevel(level)","doc":"When level is -1, window is always below all others; when 0, window is normal; when 1, window is above all others."},{"name":"loadstring","def":"webview:loadstring(string, basepath)","doc":"Loads the given string in the webview; basepath must be an absolute path."},{"name":"open","def":"webview.open()","doc":"Opens and returns a new webview instance; as with all other Hydra objects, it's just a table, and you're free to set whatever keys you want on it."},{"name":"setignoresmouse","def":"webview:setignoresmouse(bool)","doc":"Set whether a webview window can be interacted with via the mouse."},{"name":"loadfile","def":"webview:loadfile(path)","doc":"Loads the given file in the web view."},{"name":"closed","def":"webview.closed = function()","doc":"Called (if set) when the webview closes."}],"doc":"For showing stuff in web views!"},{"name":"hotkey","items":[{"name":"bind","def":"hotkey.bind(...) -> hotkey","doc":"Shortcut for: return hotkey.new(...):enable()"},{"name":"disableall","def":"hotkey.disableall()","doc":"Disables all hotkeys; automatically called when user config reloads."},{"name":"enable","def":"hotkey:enable() -> self","doc":"Registers the hotkey's fn as the callback when the user presses key while holding mods."},{"name":"disable","def":"hotkey:disable() -> self","doc":"Disables the given hotkey; does not remove it from hotkey.keys."},{"name":"new","def":"hotkey.new(mods, key, fn) -> hotkey","doc":"Creates a new hotkey that can be enabled. The hotkey has the public fields: key, mods, fn."}],"doc":"Create and manage global hotkeys.\n\nThe `mods` field is case-insensitive and may any of the following strings: \"cmd\", \"ctrl\", \"alt\", or \"shift\".\n\nThe `key` field is case-insensitive and may be any single-character string; it may also be any of the following strings:\n\n    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20\n    PAD, PAD*, PAD+, PAD\/, PAD-, PAD=, PAD0, PAD1, PAD2, PAD3, PAD4, PAD5, PAD6, PAD7, PAD8, PAD9, PAD_CLEAR, PAD_ENTER\n    RETURN, TAB, SPACE, DELETE, ESCAPE, HELP, HOME, PAGE_UP, FORWARD_DELETE, END, PAGE_DOWN, LEFT, RIGHT, DOWN, UP"},{"name":"notify","items":[{"name":"unregister","def":"notify.unregister(id)","doc":"Unregisters a function to no longer be called when an Apple notification with the given tag is clicked."},{"name":"register","def":"notify.register(tag, fn()) -> id","doc":"Registers a function to be called when an Apple notification with the given tag is clicked."},{"name":"show","def":"notify.show(title, subtitle, text, tag)","doc":"Show an Apple notification. Tag is a unique string that identifies this notification, and will be passed to notify.clicked() if the notification is clicked. None of the strings are optional, though they may each be blank."},{"name":"unregisterall","def":"notify.unregisterall()","doc":"Unregisters all functions registered for notification-clicks; called automatically when user config reloads."}],"doc":"Apple's built-in notifications system."},{"name":"json","items":[{"name":"decode","def":"json.decode(str) -> val","doc":"Returns a Lua value representing the given JSON string."},{"name":"encode","def":"json.encode(val[, prettyprint?]) -> str","doc":"Returns a JSON string representing the given value; if prettyprint is true, the resulting string will be quite beautiful."}],"doc":"Functions for converting between Lua values and JSON strings."},{"name":"utf8","items":[{"name":"chars","def":"utf8.chars(str) -> {str, ...}","doc":"Splits the string into groups of (UTF-8 encoded) strings representing what humans would consider individual characters.\n\nThe result is a sequential table, such that table.concat(result) produces the original string."},{"name":"count","def":"utf8.count(str) -> int","doc":"Returns the number of characters as humans would count them."}],"doc":"Utilities for handling UTF-8 strings 'correctly'."},{"name":"settings","items":[{"name":"get","def":"settings.get(key) -> val","doc":"Gets the Lua value for the given string key."},{"name":"set","def":"settings.set(key, val)","doc":"Saves the given value for the string key; value must be a string, number, boolean, nil, or a table of any of these, recursively."}],"doc":"Functions for user-defined settings that persist across Hydra launches."},{"name":"timer","items":[{"name":"doafter","def":"timer.doafter(sec, fn())","doc":"Runs the function after sec seconds."},{"name":"start","def":"timer:start() -> timer","doc":"Begins to execute timer.fn every timer.seconds; calling this does not cause an initial firing of the timer immediately."},{"name":"runonce","def":"timer.runonce(fn())","doc":"Runs the function exactly once in the entire lifespan of Hydra; reset only when you quit\/restart."},{"name":"days","def":"timer.days(n) -> sec","doc":"Returns the number of days in seconds."},{"name":"stopall","def":"timer.stopall()","doc":"Stops all running timers; called automatically when user config reloads."},{"name":"stop","def":"timer:stop() -> timer","doc":"Stops the timer's fn from getting called until started again."},{"name":"new","def":"timer.new(seconds, fn) -> timer","doc":"Creates a new timer that can be started. Has the fields: seconds, fn."},{"name":"weeks","def":"timer.weeks(n) -> sec","doc":"Returns the number of weeks in seconds."},{"name":"seconds","def":"timer.seconds(n) -> sec","doc":"Returns the number of seconds in seconds."},{"name":"hours","def":"timer.hours(n) -> sec","doc":"Returns the number of hours in seconds."},{"name":"minutes","def":"timer.minutes(n) -> sec","doc":"Returns the number of minutes in seconds."}],"doc":"Execute functions with various timing rules."},{"name":"hydra","items":[{"name":"showabout","def":"hydra.showabout()","doc":"Displays the standard OS X about panel; implicitly focuses Hydra."},{"name":"reload","def":"hydra.reload()","doc":"Reloads your init-file. Makes sure to clear any state that makes sense to clear (hotkeys, pathwatchers, etc)."},{"name":"alert","def":"hydra.alert(str, seconds = 2)","doc":"Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.."},{"name":"putindock","def":"hydra.putindock(bool)","doc":"Sets whether Hydra has a Dock icon, and thus can be switched to via Cmd-Tab."},{"name":"check_accessibility","def":"hydra.check_accessibility(shouldprompt) -> isenabled","doc":"Returns whether accessibility is enabled. If passed `true`, prompts the user to enable it."},{"name":"exec","def":"hydra.exec(command) -> string","doc":"Runs a shell function and returns stdout as a string (without trailing newline)."},{"name":"douserfile","def":"hydra.douserfile(name)","doc":"Convenience wrapper around dofile() and hydra.userfile(name)"},{"name":"fileexists","def":"hydra.fileexists(path) -> exists, isdir","doc":"Checks if a file exists, and whether it's a directory."},{"name":"resourcesdir","def":"hydra.resourcesdir -> string","doc":"The path of the built-in lua source files, with no trailing slash."},{"name":"uuid","def":"hydra.uuid() -> string","doc":"Returns a UUID as a string"},{"name":"indock","def":"hydra.indock() -> bool","doc":"Returns whether Hydra has a Dock icon, and thus can be switched to via Cmd-Tab."},{"name":"call","def":"hydra.call(fn, ...) -> ...","doc":"Just like pcall, except that failures are handled using hydra.errorhandler"},{"name":"focushydra","def":"hydra.focushydra()","doc":"Makes Hydra the currently focused app; useful in combination with textgrids."},{"name":"userfile","def":"hydra.userfile(name)","doc":"Returns the full path to the file ~\/.hydra\/{name}.lua"},{"name":"errorhandler","def":"hydra.errorhandler = function(err)","doc":"Error handler for hydra.call; intended for you to set, not for third party libs"}],"doc":"General stuff."},{"name":"screen","items":[{"name":"allscreens","def":"screen.allscreens() -> screen[]","doc":"Returns all the screens there are."},{"name":"previous","def":"screen:previous() -> screen","doc":"Returns the screen 'before' this one; I have no idea how they're ordered though."},{"name":"frame_without_dock_or_menu","def":"screen:frame_without_dock_or_menu() -> rect","doc":"Returns the screen's rect in absolute coordinates, without the dock or menu."},{"name":"next","def":"screen:next() -> screen","doc":"Returns the screen 'after' this one; I have no idea how they're ordered though."},{"name":"vislbleframe","def":"screen.visibleframe(screen) -> rect","doc":"Returns a screen's frame in its own coordinate space, without the dock or menu."},{"name":"frame","def":"screen.frame(screen) -> rect","doc":"Returns a screen's frame in its own coordinate space."},{"name":"frame_including_dock_and_menu","def":"screen:frame_including_dock_and_menu() -> rect","doc":"Returns the screen's rect in absolute coordinates, including the dock and menu."},{"name":"settint","def":"screen.settint(redarray, greenarray, bluearray)","doc":"Set the tint on a screen; experimental."},{"name":"mainscreen","def":"screen.mainscreen() -> screen","doc":"Returns the 'main' screen, i.e. the one containing the currently focused window."}],"doc":"Manipulate screens (i.e. monitors).\n\nYou usually get a screen through a window (see `window.screen`). But you can get screens by themselves through this module, albeit not in any defined\/useful order.\n\nHydra's coordinate system assumes a grid that is the union of every screen's rect (see `screen.frame_including_dock_and_menu`).\n\nEvery window's position (i.e. `topleft`) and size are relative to this grid, and they're usually within the grid. A window that's semi-offscreen only intersects the grid."},{"name":"application","items":[{"name":"title","def":"application:title() -> string","doc":"Returns the localized name of the app (in UTF8)."},{"name":"launchorfocus","def":"application.launchorfocus(name)","doc":"Launches the app with the given name, or activates it if it's already running."},{"name":"kill","def":"application:kill()","doc":"Tries to terminate the app."},{"name":"applicationsforbundleid","def":"application.applicationsforbundleid(bundleid) -> app[]","doc":"Returns any running apps that have the given bundleid."},{"name":"runningapplications","def":"application.runningapplications() -> app[]","doc":"Returns all running apps."},{"name":"activate","def":"application:activate() -> bool","doc":"Tries to activate the app (make it focused) and returns its success."},{"name":"applicationforpid","def":"application.applicationforpid(pid) -> app or nil","doc":"Returns the running app for the given pid, if it exists."},{"name":"kill9","def":"application:kill9()","doc":"Assuredly terminates the app."},{"name":"unhide","def":"application:unhide()","doc":"Unhides the app (and all its windows) if it's hidden."},{"name":"ishidden","def":"application:ishidden() -> bool","doc":"Returns whether the app is currently hidden."},{"name":"hide","def":"application:hide()","doc":"Hides the app (and all its windows)."},{"name":"visiblewindows","def":"application:visiblewindows() -> win[]","doc":"Returns only the app's windows that are visible."},{"name":"bundleid","def":"application:bundleid() -> string","doc":"Returns the bundle identifier of the app."},{"name":"allwindows","def":"application:allwindows() -> window[]","doc":"Returns all open windows owned by the given app."}],"doc":"Manipulate running applications."},{"name":"geometry","items":[{"name":"point","def":"geometry.point(x, y) -> point","doc":"Convenience function for creating a point-table."},{"name":"rect","def":"geometry.rect(x, y, w, y) -> rect","doc":"Convenience function for creating a rect-table."},{"name":"rotateccw","def":"geometry.rotateccw(point, aroundpoint, ntimes = 1) -> point","doc":"Rotates a point around another point N times."},{"name":"rectmidpoint","def":"geometry.rectmidpoint(r) -> point","doc":"Returns the midpoint of a rect."},{"name":"hypot","def":"geometry.hypot(point) -> number","doc":"Returns hypotenuse of a line defined from 0,0 to point."},{"name":"intersectionrect","def":"geometry.intersectionrect(rect1, rect2) -> rect3","doc":"Returns the intersection of two rects as a new rect."},{"name":"size","def":"geometry.size(w, h) -> size","doc":"Convenience function for creating a size-table."}],"doc":"Mathy stuff."}]
